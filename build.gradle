plugins {
    id 'application'
    id 'idea'
    id 'java'
    id 'maven-publish'
}

group = 'Niflheim'
version = new Version(major: 3, minor: 0, revision: 0, build: 0)
mainClassName = 'xyz.niflheim.stockfish.StockfishTester'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def client_version = version.toString()
def stockfish_version = "10"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

class Version {
    String major, minor, revision, build

    String toString() {
        "${major}.${minor}.${revision}_${build}"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation 'log4j:log4j:1.2.17'  // compile -> implementation으로 변경
    implementation 'commons-logging:commons-logging:1.2'  // compile -> implementation으로 변경
    implementation 'com.github.bhlangonijr:chesslib:1.3.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    runtimeOnly 'com.mysql:mysql-connector-j:8.2.0'
}

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }  // compile -> runtimeClasspath로 변경
    manifest {
        attributes 'Main-Class': 'xyz.niflheim.stockfish.StockfishTester'
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/senyast4745/Stockfish-Java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
